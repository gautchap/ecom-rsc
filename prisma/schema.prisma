datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  pending
  processing
  completed
  cancelled
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean       @default(false)
  accounts      Account[]
  sessions      Session[]
  UserAddress   UserAddress[]
  Order         Order[]
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserAddress {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName  String   @map("first_name")
  lastName   String   @map("last_name")
  address    String
  city       String
  postalCode String   @map("postal_code")
  country    String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("users_addresses")
}

model ProductCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  Product     Product[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("products_categories")
}

model Product {
  id           String          @id @default(cuid())
  name         String
  description  String?
  price        Float           @default(0)
  image        String?
  categoryId   String          @map("category_id")
  category     ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  OrderDetails OrderDetails[]
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @default(now()) @updatedAt @map("updated_at")

  @@map("products")
}

model Order {
  id           String           @id @default(cuid())
  userId       String           @map("user_id")
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  total        Float
  OrderDetails OrderDetails[]
  PaymentId    PaymentDetails[]
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @default(now()) @updatedAt @map("updated_at")

  @@map("orders")
}

model OrderDetails {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String   @map("order_id")
  productId String   @map("product_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  status    Status   @default(pending)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("orders_details")
}

model PaymentDetails {
  id        String   @id @default(cuid())
  orderId   String   @map("order_id")
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount    Float
  status    Status   @default(pending)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("payments_details")
}
